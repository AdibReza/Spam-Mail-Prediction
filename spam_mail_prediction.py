# -*- coding: utf-8 -*-
"""Spam mail prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-VSAfUlei0nqjP23jre5fRf4WNuRxvFS
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and Preprocessing"""

raw_mail_data = pd.read_csv('/content/drive/MyDrive/ML datasets/Spam mail prediction/mail_data.csv')

print(raw_mail_data)

raw_mail_data.head()

# replace the null values with null string
#there can be several null values(although it says none idk why), so we need to fillup those
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

mail_data.head()

mail_data.shape

"""# Label Encoding
spam mail: 0  

ham mail : 1  

Here we are locating the column and changing the texual data 'spam' to 0 and 'ham' to 1.
"""

mail_data.loc[mail_data['Category']=='spam','Category'] = 0
mail_data.loc[mail_data['Category']== 'ham', 'Category'] = 1

#separating the data into label and texts
x = mail_data['Message']
y = mail_data['Category']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 3)

print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

"""## Feature Extraction

min_df = 1 means that if the score of a particular word is less than 1, wee need to omit that word
"""

# transforming the text values to feature vectors to feed to our logistic regression

feature_extraction = TfidfVectorizer(min_df=1, stop_words = 'english', lowercase = True)

x_train_features = feature_extraction.fit_transform(x_train)
x_test_features = feature_extraction.transform(x_test)

#Now converting the y_train and y_test text values into integers.

y_train = y_train.astype('int')
y_test = y_test.astype('int')

print(x_train_features)

"""# Logistic Regeression"""

joshim = LogisticRegression()

joshim.fit(x_train_features, y_train)

x_train_prediction = joshim.predict(x_train_features)
prediction = accuracy_score(x_train_prediction, y_train)
print(prediction)

x_test_prediction = joshim.predict(x_test_features)
prediction = accuracy_score(x_test_prediction, y_test)
print(prediction)

"""## Building a predictive system"""

input_data = ['Even my brother is not like to speak with me. They treat me like aids patent.']

#converting text to feature vectors
input_data_features = feature_extraction.transform(input_data)

#making prediction
prediction = joshim.predict(input_data_features)

if prediction == 1:
  print('Ham')
if prediction == 0:
  print('Spam')

